{"version":3,"file":"extract-colors.node.es.js","sources":["../src/color/Color.ts","../src/sort/AverageGroup.ts","../src/sort/AverageManager.ts","../src/sort/sortColors.ts","../src/color/FinalColor.ts","../src/extract/cleanInputs.ts","../src/color/LeafGroup.ts","../src/color/RootGroup.ts","../src/extract/extractor.ts","../src/extractColors.ts","../src/extractColors.node.ts"],"sourcesContent":["/**\n * Informations like saturation or count of pixels in image.\n * \n * @class\n * @classdesc Calculate some informations and store data about color.\n */\nexport default class Color {\n  \n  _red: number\n  _green: number\n  _blue: number\n  _hex: number\n  _count = 1\n\n  private __saturation = -1\n  private __hue = -1\n  private __lightness = -1\n  private __intensity = -1\n\n  /**\n   * Set red, green and blue colors to create the Color object.\n   */\n  constructor (red: number, green: number, blue: number, hex = red << 16 | green << 8 | blue) {\n    this._red = red\n    this._green = green\n    this._blue = blue\n    this._hex = hex\n  }\n\n  /**\n   * Distance between two colors.\n   * - Minimum is 0 (between two same colors)\n   * - Maximum is 1 (for example between black and white)\n   */\n  static distance (colorA: Color, colorB: Color) {\n    return (Math.abs(colorB._red - colorA._red) + Math.abs(colorB._green - colorA._green) + Math.abs(colorB._blue - colorA._blue)) / (3 * 0xFF)\n  }\n\n  clone() {\n    const color = new Color(this._red, this._green, this._blue, this._hex)\n    color._count = this._count\n    return color\n  }\n\n  updateHSL () {\n    const red = this._red / 255\n    const green = this._green / 255\n    const blue = this._blue / 255\n\n    const max = Math.max(red, green, blue)\n    const min = Math.min(red, green, blue)\n\n    this.__lightness = (max + min) / 2\n\n    // achromatic\n    if (max === min) {\n      this.__hue = 0\n      this.__saturation = 0\n      this.__intensity = 0\n    } else {\n      const distance = max - min;\n      \n      this.__saturation = this.__lightness > 0.5 ? distance / (2 - max - min) : distance / (max + min)\n      this.__intensity = this.__saturation * ((0.5 - Math.abs(0.5 - this.__lightness)) * 2)\n      switch (max) {\n        case red:\n          this.__hue = ((green - blue) / distance + (green < blue ? 6 : 0)) / 6\n          break;\n        case green:\n          this.__hue = ((blue - red) / distance + 2) / 6\n          break;\n        case blue:\n          this.__hue = ((red - green) / distance + 4) / 6\n          break;\n      }\n    }\n  }\n\n  /**\n   * Hue from 0 to 1\n   */\n  get _hue () {\n    if (this.__hue === -1) {\n      this.updateHSL()\n    }\n    return this.__hue\n  }\n\n  /**\n   * Saturation from 0 to 1\n   */\n  get _saturation () {\n    if (this.__saturation === -1) {\n      this.updateHSL()\n    }\n    return this.__saturation\n  }\n\n  /**\n   * Lightness from 0 to 1\n   */\n  get _lightness () {\n    if (this.__lightness === -1) {\n      this.updateHSL()\n    }\n    return this.__lightness\n  }\n  \n  /**\n   * Color intensity from 0 to 1\n   */\n  get _intensity () {\n    if (this.__intensity === -1) {\n      this.updateHSL()\n    }\n    return this.__intensity\n  }\n}\n","import Color from \"../color/Color\";\n\nconst distance = (a: number, b: number) => Math.abs(a - b)\nconst hueDistance = (a: number, b: number) =>\n  Math.min(distance(a, b), distance((a + 0.5) % 1, (b + 0.5) % 1))\n\nexport class AverageGroup {\n  colors: Color[] = []\n  private _average: Color | null = null\n\n  addColor(color: Color) {\n    this.colors.push(color)\n    this._average = null\n  }\n\n  isSamePalette(color: Color, hue: number, saturation: number, lightness: number) {\n    for (let i = 0; i < this.colors.length; i++) {\n      const currentColor = this.colors[i]\n      const isSame = \n        hueDistance(currentColor._hue, color._hue) < hue &&\n        distance(currentColor._saturation, color._saturation) < saturation &&\n        distance(currentColor._lightness, color._lightness) < lightness\n\n      if (!isSame) {\n        return false\n      }\n    }\n    return true\n  }\n\n  get average () {\n    if (!this._average) {\n      const { r, g, b } = this.colors.reduce((total, color) => {\n        total.r += color._red\n        total.g += color._green\n        total.b += color._blue\n        return total\n      }, { r: 0, g: 0, b: 0 })\n\n      const total = this.colors.reduce((_count, color) => _count + color._count, 0)\n      this._average = new Color(\n        Math.round(r / this.colors.length),\n        Math.round(g / this.colors.length),\n        Math.round(b / this.colors.length)\n      )\n      this._average._count = total\n    }\n    return this._average\n  } \n}","import Color from \"../color/Color\";\nimport { AverageGroup } from \"./AverageGroup\";\n\nexport class AverageManager {\n\n  _hue:number\n  _saturation:number\n  _lightness:number\n\n  private _groups: AverageGroup[] = []\n\n  constructor (\n    hue: number,\n    saturation: number,\n    lightness: number\n  ) {\n    this._hue = hue\n    this._saturation = saturation\n    this._lightness = lightness\n  }\n\n  addColor(color: Color) {\n    const samePalette = this._groups.find(averageGroup => averageGroup.isSamePalette(color, this._hue, this._saturation, this._lightness))\n    if (samePalette) {\n      samePalette.addColor(color)\n    } else {\n      const averageGroup = new AverageGroup()\n      averageGroup.addColor(color)\n      this._groups.push(averageGroup)\n    }\n  }\n\n  getGroups() {\n    return this._groups.map(averageGroup => averageGroup.average)\n  }\n}","import Color from \"../color/Color\";\nimport { AverageManager } from \"./AverageManager\";\n\nexport default (\n  list: Color[],\n  _pixels: number,\n  _hueDistance: number,\n  _saturationDistance: number,\n  _lightnessDistance: number,\n) => {\n  const averageManager = new AverageManager(_hueDistance, _saturationDistance, _lightnessDistance)\n  list.forEach(color => averageManager.addColor(color))\n\n  const sorted = averageManager.getGroups()\n\n  sorted.sort((a, b) => {\n    const bPower = (b._intensity + 0.1) * (0.9 - b._count / _pixels)\n    const aPower = (a._intensity + 0.1) * (0.9 - a._count / _pixels)\n    return bPower - aPower \n  })\n  return sorted\n} \n","import { FinalColor } from \"../types/Color\";\nimport Color from \"./Color\";\n\nexport const createFinalColor = (color: Color, pixels: number): FinalColor => {\n  return {\n    hex: `#${'0'.repeat(6 - color._hex.toString(16).length)}${color._hex.toString(16)}`,\n    red: color._red,\n    green: color._green,\n    blue: color._blue,\n    area: color._count / pixels,\n    hue: color._hue,\n    saturation: color._saturation,\n    lightness: color._lightness,\n    intensity: color._intensity,\n  }\n}","import { BrowserOptions } from \"../types/Options\"\n\n/**\n * Default extractor values\n */\nexport const enum EXTRACTOR_DEFAULT {\n  PIXELS = 64000,\n  DISTANCE = 0.22\n}\n\n/**\n * Default average values\n */\nexport const enum AVERAGE_DEFAULT {\n  HUE = 1/12,\n  SATURATION = 1/5,\n  LIGHTNESS = 1/5,\n}\n\nexport default ({\n  pixels = EXTRACTOR_DEFAULT.PIXELS,\n  distance = EXTRACTOR_DEFAULT.DISTANCE,\n  colorValidator = (_red: number, _green: number, _blue: number, _alpha?: number) => (_alpha ?? 255) > 250,\n  hueDistance = AVERAGE_DEFAULT.HUE,\n  saturationDistance = AVERAGE_DEFAULT.LIGHTNESS,\n  lightnessDistance = AVERAGE_DEFAULT.SATURATION,\n  crossOrigin = null\n}:BrowserOptions = {}): [\n  number,\n  number,\n  (red: number, green: number, blue: number, alpha: number) => boolean,\n  number,\n  number,\n  number,\n  \"\" | \"anonymous\" | \"use-credentials\" | null,\n] => {\n  if (__DEV__) {\n\n    /**\n     * Test if value is an integer.\n     */\n    const testUint = (label: string, val: number, min = 0, max = Number.MAX_SAFE_INTEGER) => {\n      if (!Number.isInteger(val)) {\n        throw new Error(`${label} is not a valid number (${ val })`)\n      }\n\n      if (val < min) {\n        console.warn(`${label} can not be less than ${min} (it's ${val})`)\n      }\n\n      if (val > max) {\n        console.warn(`${label} can not be more than ${max} (it's ${val})`)\n      }\n\n      return Math.min(Math.max(val, min), max)\n    }\n\n    /**\n     * Test if value is a number.\n     */\n    const testNumber = (label: string, val: number, min = 0, max = Number.MAX_VALUE) => {\n      if (Number(val) !== val) {\n        throw new Error(`${label} is not a valid number (${ val })`)\n      }\n\n      if (val < min) {\n        console.warn(`${label} can not be less than ${min} (it's ${val})`)\n      }\n\n      if (val > max) {\n        console.warn(`${label} can not be more than ${max} (it's ${val})`)\n      }\n\n      return Math.min(Math.max(val, min), max)\n    }\n\n    /**\n     * Test if value is a function.\n     */\n    const testFunction = <T = () => void>(label: string, val: T) => {\n      if (!val || {}.toString.call(val) !== '[object Function]') {\n        throw new Error(`${label} is not a function (${ val })`)\n      }\n\n      return val\n    }\n\n    return [\n      testUint('pixels', pixels || 0, 1),\n      testNumber('distance', distance, 0, 1),\n      testFunction('colorValidator', colorValidator),\n      testNumber('hueDistance', hueDistance, 0, 1),\n      testNumber('saturationDistance', saturationDistance, 0, 1),\n      testNumber('lightnessDistance', lightnessDistance, 0, 1),\n      crossOrigin\n    ]\n\n  } else {\n\n    return [\n      Math.max(pixels, 1),\n      Math.min(Math.max(distance, 0), 1),\n      colorValidator,\n      Math.min(Math.max(hueDistance, 0), 1),\n      Math.min(Math.max(saturationDistance, 0), 1),\n      Math.min(Math.max(lightnessDistance, 0), 1),\n      crossOrigin\n    ]\n\n  }  \n}\n","import Color from './Color'\n\n/**\n * Manage list of colors to optimize and merge neighbors colors.\n *\n * @export\n * @class LeafGroup\n */\nexport default class LeafGroup {\n\n  _count: number\n  _children: { [key: number]: Color }\n\n  /**\n   * Store colors or groups and _count similiar groups in the image.\n   */\n  constructor () {\n    this._count = 0\n    this._children = { }\n  }\n\n  /**\n   * Add color to the group.\n   */\n  addColor (_hex: number, _red: number, _green: number, _blue: number) {\n    this._count++\n    if (this._children[_hex]) {\n      this._children[_hex]._count++\n    } else {\n      this._children[_hex] = new Color(_red, _green, _blue, _hex)\n    }\n    return this._children[_hex]\n  }\n\n  /**\n   * Get list of groups of list of colors.\n   */\n  getList () {\n    return (Object.keys(this._children) as unknown[] as number[])\n      .map((key) => this._children[key])\n  }\n\n  /**\n   * Representative color of leaf.\n   */\n  createMainColor () {\n    const list = this.getList()\n    const biggest = list.reduce((a, b) => a._count >= b._count ? a : b)\n    const main = biggest.clone()\n    main._count = this._count\n    return main\n  }\n}\n","import Color from './Color'\nimport LeafGroup from './LeafGroup'\n\n/**\n * RootGroup colors with algorithms to optimize and merge neighbors colors.\n * \n * @class\n * @classdesc Manage list of colors or groups.\n */\nexport default class RootGroup {\n  _count: number\n  _children: { [key: number]: LeafGroup }\n\n  /**\n   * Store colors or groups and _count similiar groups in the image.\n   */\n  constructor () {\n    this._count = 0\n    this._children = { }\n  }\n\n  /**\n   * Get list of groups of list of colors.\n   */\n  getList () {\n    return (Object.keys(this._children) as unknown[] as number[])\n      .map((key) => this._children[key])\n  }\n\n  addColor(r: number, g: number, b: number) {\n    const full = r << 16 | g << 8 | b\n    const loss = (r >> 4 & 0xF) << 8 | (g >> 4 & 0xF) << 4 | (b >> 4 & 0xF)\n    this._count++\n    return this.getLeafGroup(loss).addColor(full, r, g, b)\n  }\n\n  /**\n   * Add a key for a color, this key is a simplification to find neighboring colors.\n   * Neighboring colors has same key.\n   */\n  getLeafGroup (key: number) {\n    if (!this._children[key]) {\n      this._children[key] = new LeafGroup()\n    }\n    return this._children[key] as LeafGroup\n  }\n\n  /**\n   * List of colors sorted by importance (neighboring hare calculated by distance and removed).\n   * Importance is calculated with the saturation and _count of neighboring colors.\n   */\n  getColors (_distance: number) {\n    const list = this.getList()\n      .map((child) => child.createMainColor())\n\n    list.sort((a, b) => b._count - a._count)\n\n    const newList: Color[] = []\n    while (list.length) {\n      const current = list.shift() as Color\n      list\n        .filter((color) => Color.distance(current, color) < _distance)\n        .forEach(near => {\n          current._count += near._count\n          const i = list.findIndex(color => color === near) \n          list.splice(i, 1)\n        })\n      \n      newList.push(current)\n    }\n\n    return newList\n  }\n}\n","import RootGroup from '../color/RootGroup'\n\n/**\n * Run extract process and get list of colors.\n */\nexport default (\n  { data, width, height }: ImageData | { data: Uint8ClampedArray | number[], width?: number, height?: number },\n  _pixels: number,\n  _distance: number,\n  _colorValidator: (red: number, green: number, blue: number, alpha: number) => boolean\n) => {\n  const colorGroup = new RootGroup()\n  const reducer = (width && height) ? Math.floor(width * height / _pixels) || 1 : 1\n  let ignoredColorsCount = 0\n\n  for (let i = 0; i < data.length; i += 4 * reducer) {\n    const r = data[i] // 0 -> 255\n    const g = data[i + 1]\n    const b = data[i + 2]\n    const a = data[i + 3]\n\n    if (_colorValidator(r, g, b, a)) {\n      colorGroup.addColor(r, g, b)\n    } else {\n      ignoredColorsCount++\n    }\n  }\n  \n  return {\n    colors: colorGroup.getColors(_distance),\n    count: colorGroup._count + ignoredColorsCount\n  }\n}\n","import Color from \"./color/Color\"\nimport sortColors from \"./sort/sortColors\"\nimport { createFinalColor } from \"./color/FinalColor\"\nimport { BrowserOptions, NodeOptions } from \"./types/Options\"\nimport cleanInputs from \"./extract/cleanInputs\"\nimport extractor from \"./extract/extractor\"\n\n/**\n * Sort colors and generate standard list of colors.\n */\nexport const sortFinalColors = (_colors: Color[], _pixels: number, _hueDistance: number, _saturationDistance: number, _lightnessDistance: number) => {\n  const list = sortColors(_colors, _pixels, _hueDistance, _saturationDistance, _lightnessDistance)\n  return list.map(color => createFinalColor(color, _pixels))\n}\n\n/**\n * Extract colors from an ImageData object.\n */\nexport const extractColorsFromImageData = (imageData: ImageData | { data: Uint8ClampedArray | number[], width?: number, height?: number }, options: NodeOptions | BrowserOptions = {}) => {\n  const [_pixels, _distance, _colorValidator, _hueDistance, _saturationDistance, _lightnessDistance] = cleanInputs(options)\n  const { colors, count } = extractor(imageData, _pixels, _distance, _colorValidator)\n  return sortFinalColors(colors, count, _hueDistance, _saturationDistance, _lightnessDistance)\n}\n","import './global.d.ts'\nimport { extractColorsFromImageData } from './extractColors'\nimport { FinalColor } from './types/Color'\nimport type { NodeOptions } from \"./types/Options\"\n\n/**\n * Extract colors from an imageData.\n */\nconst extractColors = (imageData: ImageData | { data: Uint8ClampedArray | number[], width?: number, height?: number }, options?: NodeOptions) => {\n  if (__DEV__) {\n    if (!imageData.data) {\n      throw new Error('Send imageData to extractColors')\n    }\n  }\n  \n  return new Promise((resolve: (value: FinalColor[]) => void) => {\n    resolve(extractColorsFromImageData(imageData, options))\n  })\n}\n\nlet extractColorsFromImage\nlet extractColorsFromSrc\n\nif (__DEV__) {\n  extractColorsFromImage = () => {\n    throw new Error('Can not use extractColorsFromImage for Node.js')\n  }\n  \n  extractColorsFromSrc = () => {\n    throw new Error('Can not use extractColorsFromSrc for Node.js')\n  }\n}\n\nexport * from \"./types/Color\"\nexport * from \"./types/NodeImageData\"\nexport * from \"./types/Options\"\n\nexport {\n  extractColorsFromImageData,\n  extractColorsFromImage,\n  extractColorsFromSrc,\n  extractColors\n}\n\nexport default extractColors\n"],"names":["distance","total","hueDistance"],"mappings":"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"}