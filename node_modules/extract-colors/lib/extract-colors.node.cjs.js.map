{"version":3,"file":"extract-colors.node.cjs.js","sources":["../src/color/Color.ts","../src/sort/AverageGroup.ts","../src/sort/AverageManager.ts","../src/color/LeafGroup.ts","../src/color/RootGroup.ts","../src/extractColors.ts","../src/sort/sortColors.ts","../src/color/FinalColor.ts","../src/extract/cleanInputs.ts","../src/extract/extractor.ts","../src/extractColors.node.ts"],"sourcesContent":["/**\n * Informations like saturation or count of pixels in image.\n * \n * @class\n * @classdesc Calculate some informations and store data about color.\n */\nexport default class Color {\n  \n  _red: number\n  _green: number\n  _blue: number\n  _hex: number\n  _count = 1\n\n  private __saturation = -1\n  private __hue = -1\n  private __lightness = -1\n  private __intensity = -1\n\n  /**\n   * Set red, green and blue colors to create the Color object.\n   */\n  constructor (red: number, green: number, blue: number, hex = red << 16 | green << 8 | blue) {\n    this._red = red\n    this._green = green\n    this._blue = blue\n    this._hex = hex\n  }\n\n  /**\n   * Distance between two colors.\n   * - Minimum is 0 (between two same colors)\n   * - Maximum is 1 (for example between black and white)\n   */\n  static distance (colorA: Color, colorB: Color) {\n    return (Math.abs(colorB._red - colorA._red) + Math.abs(colorB._green - colorA._green) + Math.abs(colorB._blue - colorA._blue)) / (3 * 0xFF)\n  }\n\n  clone() {\n    const color = new Color(this._red, this._green, this._blue, this._hex)\n    color._count = this._count\n    return color\n  }\n\n  updateHSL () {\n    const red = this._red / 255\n    const green = this._green / 255\n    const blue = this._blue / 255\n\n    const max = Math.max(red, green, blue)\n    const min = Math.min(red, green, blue)\n\n    this.__lightness = (max + min) / 2\n\n    // achromatic\n    if (max === min) {\n      this.__hue = 0\n      this.__saturation = 0\n      this.__intensity = 0\n    } else {\n      const distance = max - min;\n      \n      this.__saturation = this.__lightness > 0.5 ? distance / (2 - max - min) : distance / (max + min)\n      this.__intensity = this.__saturation * ((0.5 - Math.abs(0.5 - this.__lightness)) * 2)\n      switch (max) {\n        case red:\n          this.__hue = ((green - blue) / distance + (green < blue ? 6 : 0)) / 6\n          break;\n        case green:\n          this.__hue = ((blue - red) / distance + 2) / 6\n          break;\n        case blue:\n          this.__hue = ((red - green) / distance + 4) / 6\n          break;\n      }\n    }\n  }\n\n  /**\n   * Hue from 0 to 1\n   */\n  get _hue () {\n    if (this.__hue === -1) {\n      this.updateHSL()\n    }\n    return this.__hue\n  }\n\n  /**\n   * Saturation from 0 to 1\n   */\n  get _saturation () {\n    if (this.__saturation === -1) {\n      this.updateHSL()\n    }\n    return this.__saturation\n  }\n\n  /**\n   * Lightness from 0 to 1\n   */\n  get _lightness () {\n    if (this.__lightness === -1) {\n      this.updateHSL()\n    }\n    return this.__lightness\n  }\n  \n  /**\n   * Color intensity from 0 to 1\n   */\n  get _intensity () {\n    if (this.__intensity === -1) {\n      this.updateHSL()\n    }\n    return this.__intensity\n  }\n}\n","import Color from \"../color/Color\";\n\nconst distance = (a: number, b: number) => Math.abs(a - b)\nconst hueDistance = (a: number, b: number) =>\n  Math.min(distance(a, b), distance((a + 0.5) % 1, (b + 0.5) % 1))\n\nexport class AverageGroup {\n  colors: Color[] = []\n  private _average: Color | null = null\n\n  addColor(color: Color) {\n    this.colors.push(color)\n    this._average = null\n  }\n\n  isSamePalette(color: Color, hue: number, saturation: number, lightness: number) {\n    for (let i = 0; i < this.colors.length; i++) {\n      const currentColor = this.colors[i]\n      const isSame = \n        hueDistance(currentColor._hue, color._hue) < hue &&\n        distance(currentColor._saturation, color._saturation) < saturation &&\n        distance(currentColor._lightness, color._lightness) < lightness\n\n      if (!isSame) {\n        return false\n      }\n    }\n    return true\n  }\n\n  get average () {\n    if (!this._average) {\n      const { r, g, b } = this.colors.reduce((total, color) => {\n        total.r += color._red\n        total.g += color._green\n        total.b += color._blue\n        return total\n      }, { r: 0, g: 0, b: 0 })\n\n      const total = this.colors.reduce((_count, color) => _count + color._count, 0)\n      this._average = new Color(\n        Math.round(r / this.colors.length),\n        Math.round(g / this.colors.length),\n        Math.round(b / this.colors.length)\n      )\n      this._average._count = total\n    }\n    return this._average\n  } \n}","import Color from \"../color/Color\";\nimport { AverageGroup } from \"./AverageGroup\";\n\nexport class AverageManager {\n\n  _hue:number\n  _saturation:number\n  _lightness:number\n\n  private _groups: AverageGroup[] = []\n\n  constructor (\n    hue: number,\n    saturation: number,\n    lightness: number\n  ) {\n    this._hue = hue\n    this._saturation = saturation\n    this._lightness = lightness\n  }\n\n  addColor(color: Color) {\n    const samePalette = this._groups.find(averageGroup => averageGroup.isSamePalette(color, this._hue, this._saturation, this._lightness))\n    if (samePalette) {\n      samePalette.addColor(color)\n    } else {\n      const averageGroup = new AverageGroup()\n      averageGroup.addColor(color)\n      this._groups.push(averageGroup)\n    }\n  }\n\n  getGroups() {\n    return this._groups.map(averageGroup => averageGroup.average)\n  }\n}","import Color from './Color'\n\n/**\n * Manage list of colors to optimize and merge neighbors colors.\n *\n * @export\n * @class LeafGroup\n */\nexport default class LeafGroup {\n\n  _count: number\n  _children: { [key: number]: Color }\n\n  /**\n   * Store colors or groups and _count similiar groups in the image.\n   */\n  constructor () {\n    this._count = 0\n    this._children = { }\n  }\n\n  /**\n   * Add color to the group.\n   */\n  addColor (_hex: number, _red: number, _green: number, _blue: number) {\n    this._count++\n    if (this._children[_hex]) {\n      this._children[_hex]._count++\n    } else {\n      this._children[_hex] = new Color(_red, _green, _blue, _hex)\n    }\n    return this._children[_hex]\n  }\n\n  /**\n   * Get list of groups of list of colors.\n   */\n  getList () {\n    return (Object.keys(this._children) as unknown[] as number[])\n      .map((key) => this._children[key])\n  }\n\n  /**\n   * Representative color of leaf.\n   */\n  createMainColor () {\n    const list = this.getList()\n    const biggest = list.reduce((a, b) => a._count >= b._count ? a : b)\n    const main = biggest.clone()\n    main._count = this._count\n    return main\n  }\n}\n","import Color from './Color'\nimport LeafGroup from './LeafGroup'\n\n/**\n * RootGroup colors with algorithms to optimize and merge neighbors colors.\n * \n * @class\n * @classdesc Manage list of colors or groups.\n */\nexport default class RootGroup {\n  _count: number\n  _children: { [key: number]: LeafGroup }\n\n  /**\n   * Store colors or groups and _count similiar groups in the image.\n   */\n  constructor () {\n    this._count = 0\n    this._children = { }\n  }\n\n  /**\n   * Get list of groups of list of colors.\n   */\n  getList () {\n    return (Object.keys(this._children) as unknown[] as number[])\n      .map((key) => this._children[key])\n  }\n\n  addColor(r: number, g: number, b: number) {\n    const full = r << 16 | g << 8 | b\n    const loss = (r >> 4 & 0xF) << 8 | (g >> 4 & 0xF) << 4 | (b >> 4 & 0xF)\n    this._count++\n    return this.getLeafGroup(loss).addColor(full, r, g, b)\n  }\n\n  /**\n   * Add a key for a color, this key is a simplification to find neighboring colors.\n   * Neighboring colors has same key.\n   */\n  getLeafGroup (key: number) {\n    if (!this._children[key]) {\n      this._children[key] = new LeafGroup()\n    }\n    return this._children[key] as LeafGroup\n  }\n\n  /**\n   * List of colors sorted by importance (neighboring hare calculated by distance and removed).\n   * Importance is calculated with the saturation and _count of neighboring colors.\n   */\n  getColors (_distance: number) {\n    const list = this.getList()\n      .map((child) => child.createMainColor())\n\n    list.sort((a, b) => b._count - a._count)\n\n    const newList: Color[] = []\n    while (list.length) {\n      const current = list.shift() as Color\n      list\n        .filter((color) => Color.distance(current, color) < _distance)\n        .forEach(near => {\n          current._count += near._count\n          const i = list.findIndex(color => color === near) \n          list.splice(i, 1)\n        })\n      \n      newList.push(current)\n    }\n\n    return newList\n  }\n}\n","import Color from \"./color/Color\"\nimport sortColors from \"./sort/sortColors\"\nimport { createFinalColor } from \"./color/FinalColor\"\nimport { BrowserOptions, NodeOptions } from \"./types/Options\"\nimport cleanInputs from \"./extract/cleanInputs\"\nimport extractor from \"./extract/extractor\"\n\n/**\n * Sort colors and generate standard list of colors.\n */\nexport const sortFinalColors = (_colors: Color[], _pixels: number, _hueDistance: number, _saturationDistance: number, _lightnessDistance: number) => {\n  const list = sortColors(_colors, _pixels, _hueDistance, _saturationDistance, _lightnessDistance)\n  return list.map(color => createFinalColor(color, _pixels))\n}\n\n/**\n * Extract colors from an ImageData object.\n */\nexport const extractColorsFromImageData = (imageData: ImageData | { data: Uint8ClampedArray | number[], width?: number, height?: number }, options: NodeOptions | BrowserOptions = {}) => {\n  const [_pixels, _distance, _colorValidator, _hueDistance, _saturationDistance, _lightnessDistance] = cleanInputs(options)\n  const { colors, count } = extractor(imageData, _pixels, _distance, _colorValidator)\n  return sortFinalColors(colors, count, _hueDistance, _saturationDistance, _lightnessDistance)\n}\n","import Color from \"../color/Color\";\nimport { AverageManager } from \"./AverageManager\";\n\nexport default (\n  list: Color[],\n  _pixels: number,\n  _hueDistance: number,\n  _saturationDistance: number,\n  _lightnessDistance: number,\n) => {\n  const averageManager = new AverageManager(_hueDistance, _saturationDistance, _lightnessDistance)\n  list.forEach(color => averageManager.addColor(color))\n\n  const sorted = averageManager.getGroups()\n\n  sorted.sort((a, b) => {\n    const bPower = (b._intensity + 0.1) * (0.9 - b._count / _pixels)\n    const aPower = (a._intensity + 0.1) * (0.9 - a._count / _pixels)\n    return bPower - aPower \n  })\n  return sorted\n} \n","import { FinalColor } from \"../types/Color\";\nimport Color from \"./Color\";\n\nexport const createFinalColor = (color: Color, pixels: number): FinalColor => {\n  return {\n    hex: `#${'0'.repeat(6 - color._hex.toString(16).length)}${color._hex.toString(16)}`,\n    red: color._red,\n    green: color._green,\n    blue: color._blue,\n    area: color._count / pixels,\n    hue: color._hue,\n    saturation: color._saturation,\n    lightness: color._lightness,\n    intensity: color._intensity,\n  }\n}","import { BrowserOptions } from \"../types/Options\"\n\n/**\n * Default extractor values\n */\nexport const enum EXTRACTOR_DEFAULT {\n  PIXELS = 64000,\n  DISTANCE = 0.22\n}\n\n/**\n * Default average values\n */\nexport const enum AVERAGE_DEFAULT {\n  HUE = 1/12,\n  SATURATION = 1/5,\n  LIGHTNESS = 1/5,\n}\n\nexport default ({\n  pixels = EXTRACTOR_DEFAULT.PIXELS,\n  distance = EXTRACTOR_DEFAULT.DISTANCE,\n  colorValidator = (_red: number, _green: number, _blue: number, _alpha?: number) => (_alpha ?? 255) > 250,\n  hueDistance = AVERAGE_DEFAULT.HUE,\n  saturationDistance = AVERAGE_DEFAULT.LIGHTNESS,\n  lightnessDistance = AVERAGE_DEFAULT.SATURATION,\n  crossOrigin = null\n}:BrowserOptions = {}): [\n  number,\n  number,\n  (red: number, green: number, blue: number, alpha: number) => boolean,\n  number,\n  number,\n  number,\n  \"\" | \"anonymous\" | \"use-credentials\" | null,\n] => {\n  if (__DEV__) {\n\n    /**\n     * Test if value is an integer.\n     */\n    const testUint = (label: string, val: number, min = 0, max = Number.MAX_SAFE_INTEGER) => {\n      if (!Number.isInteger(val)) {\n        throw new Error(`${label} is not a valid number (${ val })`)\n      }\n\n      if (val < min) {\n        console.warn(`${label} can not be less than ${min} (it's ${val})`)\n      }\n\n      if (val > max) {\n        console.warn(`${label} can not be more than ${max} (it's ${val})`)\n      }\n\n      return Math.min(Math.max(val, min), max)\n    }\n\n    /**\n     * Test if value is a number.\n     */\n    const testNumber = (label: string, val: number, min = 0, max = Number.MAX_VALUE) => {\n      if (Number(val) !== val) {\n        throw new Error(`${label} is not a valid number (${ val })`)\n      }\n\n      if (val < min) {\n        console.warn(`${label} can not be less than ${min} (it's ${val})`)\n      }\n\n      if (val > max) {\n        console.warn(`${label} can not be more than ${max} (it's ${val})`)\n      }\n\n      return Math.min(Math.max(val, min), max)\n    }\n\n    /**\n     * Test if value is a function.\n     */\n    const testFunction = <T = () => void>(label: string, val: T) => {\n      if (!val || {}.toString.call(val) !== '[object Function]') {\n        throw new Error(`${label} is not a function (${ val })`)\n      }\n\n      return val\n    }\n\n    return [\n      testUint('pixels', pixels || 0, 1),\n      testNumber('distance', distance, 0, 1),\n      testFunction('colorValidator', colorValidator),\n      testNumber('hueDistance', hueDistance, 0, 1),\n      testNumber('saturationDistance', saturationDistance, 0, 1),\n      testNumber('lightnessDistance', lightnessDistance, 0, 1),\n      crossOrigin\n    ]\n\n  } else {\n\n    return [\n      Math.max(pixels, 1),\n      Math.min(Math.max(distance, 0), 1),\n      colorValidator,\n      Math.min(Math.max(hueDistance, 0), 1),\n      Math.min(Math.max(saturationDistance, 0), 1),\n      Math.min(Math.max(lightnessDistance, 0), 1),\n      crossOrigin\n    ]\n\n  }  \n}\n","import RootGroup from '../color/RootGroup'\n\n/**\n * Run extract process and get list of colors.\n */\nexport default (\n  { data, width, height }: ImageData | { data: Uint8ClampedArray | number[], width?: number, height?: number },\n  _pixels: number,\n  _distance: number,\n  _colorValidator: (red: number, green: number, blue: number, alpha: number) => boolean\n) => {\n  const colorGroup = new RootGroup()\n  const reducer = (width && height) ? Math.floor(width * height / _pixels) || 1 : 1\n  let ignoredColorsCount = 0\n\n  for (let i = 0; i < data.length; i += 4 * reducer) {\n    const r = data[i] // 0 -> 255\n    const g = data[i + 1]\n    const b = data[i + 2]\n    const a = data[i + 3]\n\n    if (_colorValidator(r, g, b, a)) {\n      colorGroup.addColor(r, g, b)\n    } else {\n      ignoredColorsCount++\n    }\n  }\n  \n  return {\n    colors: colorGroup.getColors(_distance),\n    count: colorGroup._count + ignoredColorsCount\n  }\n}\n","import './global.d.ts'\nimport { extractColorsFromImageData } from './extractColors'\nimport { FinalColor } from './types/Color'\nimport type { NodeOptions } from \"./types/Options\"\n\n/**\n * Extract colors from an imageData.\n */\nconst extractColors = (imageData: ImageData | { data: Uint8ClampedArray | number[], width?: number, height?: number }, options?: NodeOptions) => {\n  if (__DEV__) {\n    if (!imageData.data) {\n      throw new Error('Send imageData to extractColors')\n    }\n  }\n  \n  return new Promise((resolve: (value: FinalColor[]) => void) => {\n    resolve(extractColorsFromImageData(imageData, options))\n  })\n}\n\nlet extractColorsFromImage\nlet extractColorsFromSrc\n\nif (__DEV__) {\n  extractColorsFromImage = () => {\n    throw new Error('Can not use extractColorsFromImage for Node.js')\n  }\n  \n  extractColorsFromSrc = () => {\n    throw new Error('Can not use extractColorsFromSrc for Node.js')\n  }\n}\n\nexport * from \"./types/Color\"\nexport * from \"./types/NodeImageData\"\nexport * from \"./types/Options\"\n\nexport {\n  extractColorsFromImageData,\n  extractColorsFromImage,\n  extractColorsFromSrc,\n  extractColors\n}\n\nexport default extractColors\n"],"names":["Color","constructor","red","green","blue","hex","this","_count","__saturation","__hue","__lightness","__intensity","_red","_green","_blue","_hex","static","colorA","colorB","Math","abs","clone","color","updateHSL","max","min","distance","_hue","_saturation","_lightness","_intensity","a","b","AverageGroup","colors","_average","addColor","push","isSamePalette","hue","saturation","lightness","i","length","currentColor","average","r","F","g","reduce","total","round","AverageManager","_groups","samePalette","find","averageGroup","getGroups","map","LeafGroup","_children","getList","Object","keys","key","createMainColor","main","RootGroup","full","loss","getLeafGroup","getColors","_distance","list","child","sort","newList","current","shift","filter","forEach","near","findIndex","splice","sortFinalColors","_colors","_pixels","_hueDistance","_saturationDistance","_lightnessDistance","averageManager","sorted","sortColors","pixels","repeat","toString","area","intensity","createFinalColor","extractColorsFromImageData","imageData","options","_colorValidator","colorValidator","_alpha","hueDistance","saturationDistance","lightnessDistance","crossOrigin","process","env","NODE_ENV","testNumber","label","val","Number","MAX_VALUE","Error","console","warn","testFunction","call","MAX_SAFE_INTEGER","isInteger","testUint","cleanInputs","N","count","data","width","height","colorGroup","reducer","floor","ignoredColorsCount","extractor","extractColors","Promise","resolve","extractColorsFromImage","extractColorsFromSrc"],"mappings":"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"}